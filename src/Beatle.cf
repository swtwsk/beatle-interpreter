comment "#" ;
layout "with" ; -- for pattern matching

token VIdent (lower (letter | digit | '_')*) ;   -- value ident

entrypoints Line, Program ;
Prog.       Program ::= [Phrase] ;
Line.       Line    ::= Phrase ";;" ;
Value.      Phrase  ::= LetDef ;                 -- value-definition
Expression. Phrase  ::= Expr ;                   -- expression

terminator Phrase ";;" ;

Let.        LetDef   ::= "let" [LetBind] ;
LetRec.     LetDef   ::= "letrec" [LetBind] ;
ConstBind.  LetBind  ::= LetLVI "=" Expr ;
ProcBind.   LetBind  ::= ProcName [LetLVI] "=" Expr ;
LetLVI.     LetLVI   ::= LambdaVI ;
separator nonempty LetLVI "" ;
separator nonempty LetBind "also" ;

PId.        Pattern2 ::= VIdent ;
PInt.       Pattern2 ::= Integer ;
PTrue.      Pattern2 ::= "True" ;
PFalse.     Pattern2 ::= "False" ;
PWildcard.  Pattern2 ::= "_" ;
PListEmpty. Pattern2 ::= "[]" ;
PList.      Pattern1 ::= "[" [Pattern1] "]" ;
PListCons.  Pattern  ::= Pattern2 "::" Pattern ;

separator nonempty Pattern1 "," ;
coercions Pattern 2 ;

-- Expressions --
EId.        Expr9    ::= VIdent ;
EInt.       Expr9    ::= Integer ;
ETrue.      Expr9    ::= "True" ;
EFalse.     Expr9    ::= "False" ;
EListEmpty. Expr9    ::= "[]" ;
EList.      Expr9    ::= "[" [Expr] "]" ;

EApp.       Expr8    ::= Expr8 Expr9 ;

ENeg.       Expr6    ::= "-" Expr7 ;
ENot.       Expr6    ::= "not" Expr7 ;
EMul.       Expr5    ::= Expr5 "*" Expr6 ;
EDiv.       Expr5    ::= Expr5 "/" Expr6 ;
EMod.       Expr5    ::= Expr5 "%" Expr6 ;
EAdd.       Expr4    ::= Expr4 "+" Expr5 ;
ESub.       Expr4    ::= Expr4 "-" Expr5 ;

EListCons.  Expr3    ::= Expr4 "::" Expr3 ;

ELTH.       Expr2    ::= Expr2 "<" Expr3 ;
ELE.        Expr2    ::= Expr2 "<=" Expr3 ;
EGTH.       Expr2    ::= Expr2 ">" Expr3 ;
EGE.        Expr2    ::= Expr2 ">=" Expr3 ;
EEQU.       Expr2    ::= Expr2 "==" Expr3 ;
ENE.        Expr2    ::= Expr2 "!=" Expr3 ;
EAnd.       Expr1    ::= Expr2 "and" Expr1 ;
EOr.        Expr     ::= Expr1 "or" Expr ;

ECond.      Expr     ::= "if" Expr "then" Expr "else" Expr ;
ELetIn.     Expr     ::= LetDef "in" Expr ; 
EMatch.     Expr     ::= "match" VIdent "with" "{" [Matching] "}" ;
ELambda.    Expr     ::= "\\" [LambdaVI] "->" Expr ;

LambdaVId.  LambdaVI ::= VIdent ;
WildVId.    LambdaVI ::= "_" ;

separator nonempty Expr "," ;
separator nonempty Matching ";" ;
separator nonempty LambdaVI "," ;
coercions Expr 9 ;

MatchCase.  Matching ::= "case" Pattern "->" Expr ;
ProcNameId. ProcName ::= VIdent ;
